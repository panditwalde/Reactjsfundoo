{"ast":null,"code":"// import React from 'react';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import Popover from '@material-ui/core/Popover';\n// import toRenderProps from 'recompose/toRenderProps';\n// import withState from 'recompose/withState';\n// const WithState = toRenderProps(withState('anchorEl', 'updateAnchorEl', null));\n// const styles = theme => ({\n//   typography: {\n//     margin: theme.spacing.unit * 2,\n//   },\n// });\n// function RenderPropsPopover(props) {\n//   const { classes } = props;\n//   return (\n//     <WithState>\n//       {({ anchorEl, updateAnchorEl }) => {\n//         const open = Boolean(anchorEl);\n//         return (\n//           <React.Fragment>\n//             <Button\n//               aria-owns={open ? 'render-props-popover' : undefined}\n//               aria-haspopup=\"true\"\n//               variant=\"contained\"\n//               onClick={event => {\n//                 updateAnchorEl(event.currentTarget);\n//               }}\n//             >\n//               Open Popover\n//             </Button>\n//             <Popover\n//               id=\"render-props-popover\"\n//               open={open}\n//               anchorEl={anchorEl}\n//               onClose={() => {\n//                 updateAnchorEl(null);\n//               }}\n//               anchorOrigin={{\n//                 vertical: 'bottom',\n//                 horizontal: 'center',\n//               }}\n//               transformOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'center',\n//               }}\n//             >\n//               <Typography className={classes.typography}>The content of the Popover.</Typography>\n//             </Popover>\n//           </React.Fragment>\n//         );\n//       }}\n//     </WithState>\n//   );\n// }\n// RenderPropsPopover.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n// export default withStyles(styles)(RenderPropsPopover);","map":{"version":3,"sources":["/home/user/Desktop/new project/fundoo/src/component/SetColor.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import Popover from '@material-ui/core/Popover';\n// import toRenderProps from 'recompose/toRenderProps';\n// import withState from 'recompose/withState';\n\n// const WithState = toRenderProps(withState('anchorEl', 'updateAnchorEl', null));\n\n// const styles = theme => ({\n//   typography: {\n//     margin: theme.spacing.unit * 2,\n//   },\n// });\n\n// function RenderPropsPopover(props) {\n//   const { classes } = props;\n\n//   return (\n//     <WithState>\n//       {({ anchorEl, updateAnchorEl }) => {\n//         const open = Boolean(anchorEl);\n//         return (\n//           <React.Fragment>\n//             <Button\n//               aria-owns={open ? 'render-props-popover' : undefined}\n//               aria-haspopup=\"true\"\n//               variant=\"contained\"\n//               onClick={event => {\n//                 updateAnchorEl(event.currentTarget);\n//               }}\n//             >\n//               Open Popover\n//             </Button>\n//             <Popover\n//               id=\"render-props-popover\"\n//               open={open}\n//               anchorEl={anchorEl}\n//               onClose={() => {\n//                 updateAnchorEl(null);\n//               }}\n//               anchorOrigin={{\n//                 vertical: 'bottom',\n//                 horizontal: 'center',\n//               }}\n//               transformOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'center',\n//               }}\n//             >\n//               <Typography className={classes.typography}>The content of the Popover.</Typography>\n//             </Popover>\n//           </React.Fragment>\n//         );\n//       }}\n//     </WithState>\n//   );\n// }\n\n// RenderPropsPopover.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n\n// export default withStyles(styles)(RenderPropsPopover);"]},"metadata":{},"sourceType":"module"}